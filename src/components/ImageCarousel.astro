---
interface Props {
  images: { src: string; alt: string }[];
}

const { images } = Astro.props;
const carouselId = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="relative w-full overflow-hidden rounded-lg shadow-2xl" data-carousel={carouselId}>
  <!-- Carousel wrapper -->
  <div class="relative h-[400px] md:h-[500px] lg:h-[600px]">
    {images.map((image, index) => (
      <div
        class="carousel-item absolute inset-0 transition-opacity duration-700 ease-in-out"
        data-carousel-item={index}
        style={index === 0 ? 'opacity: 1;' : 'opacity: 0;'}
      >
        <img
          src={image.src}
          alt={image.alt}
          class="w-full h-full object-cover"
        />
      </div>
    ))}
  </div>

  <!-- Slider indicators -->
  <div class="absolute z-30 flex -translate-x-1/2 bottom-5 left-1/2 space-x-3">
    {images.map((_, index) => (
      <button
        type="button"
        class="w-3 h-3 rounded-full transition-colors duration-300"
        aria-current={index === 0 ? 'true' : 'false'}
        aria-label={`Slide ${index + 1}`}
        data-carousel-slide-to={index}
      ></button>
    ))}
  </div>

  <!-- Slider controls -->
  <button
    type="button"
    class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
    data-carousel-prev
  >
    <span class="inline-flex items-center justify-center w-14 h-14 rounded-full bg-[#ffd800] group-hover:bg-[#ffed4e] shadow-lg group-focus:ring-4 group-focus:ring-[#ffd800]/50 transition-all">
      <svg class="w-6 h-6 text-[#061a0b]" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
      </svg>
      <span class="sr-only">Previous</span>
    </span>
  </button>
  <button
    type="button"
    class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"
    data-carousel-next
  >
    <span class="inline-flex items-center justify-center w-14 h-14 rounded-full bg-[#ffd800] group-hover:bg-[#ffed4e] shadow-lg group-focus:ring-4 group-focus:ring-[#ffd800]/50 transition-all">
      <svg class="w-6 h-6 text-[#061a0b]" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
      </svg>
      <span class="sr-only">Next</span>
    </span>
  </button>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const carousels = document.querySelectorAll('[data-carousel]');

    carousels.forEach((carousel) => {
      const items = carousel.querySelectorAll('[data-carousel-item]');
      const indicators = carousel.querySelectorAll('[data-carousel-slide-to]');
      const prevButton = carousel.querySelector('[data-carousel-prev]');
      const nextButton = carousel.querySelector('[data-carousel-next]');

      let currentIndex = 0;
      let autoplayInterval: number;

      const updateCarousel = (index: number) => {
        items.forEach((item, i) => {
          if (i === index) {
            (item as HTMLElement).style.opacity = '1';
          } else {
            (item as HTMLElement).style.opacity = '0';
          }
        });

        indicators.forEach((indicator, i) => {
          if (i === index) {
            indicator.setAttribute('aria-current', 'true');
            indicator.classList.add('bg-white');
            indicator.classList.remove('bg-white/50');
          } else {
            indicator.setAttribute('aria-current', 'false');
            indicator.classList.add('bg-white/50');
            indicator.classList.remove('bg-white');
          }
        });

        currentIndex = index;
      };

      const nextSlide = () => {
        const next = (currentIndex + 1) % items.length;
        updateCarousel(next);
      };

      const prevSlide = () => {
        const prev = (currentIndex - 1 + items.length) % items.length;
        updateCarousel(prev);
      };

      const startAutoplay = () => {
        autoplayInterval = window.setInterval(nextSlide, 5000);
      };

      const stopAutoplay = () => {
        clearInterval(autoplayInterval);
      };

      // Event listeners
      prevButton?.addEventListener('click', () => {
        prevSlide();
        stopAutoplay();
        startAutoplay();
      });

      nextButton?.addEventListener('click', () => {
        nextSlide();
        stopAutoplay();
        startAutoplay();
      });

      indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
          updateCarousel(index);
          stopAutoplay();
          startAutoplay();
        });
      });

      // Initialize
      updateCarousel(0);
      startAutoplay();

      // Pause on hover
      carousel.addEventListener('mouseenter', stopAutoplay);
      carousel.addEventListener('mouseleave', startAutoplay);
    });
  });
</script>
